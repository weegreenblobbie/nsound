//-----------------------------------------------------------------------------
//
//  $Id: OrganPipe.cc 874 2014-09-08 02:21:29Z weegreenblobbie $
//
//  Nsound is a C++ library and Python module for audio synthesis featuring
//  dynamic digital filters. Nsound lets you easily shape waveforms and write
//  to disk or plot them. Nsound aims to be as powerful as Csound but easy to
//  use.
//
//  Copyright (c) 2009-Present Nick Hilton
//
//  weegreenblobbie2_gmail_com (replace '_' with '@' and '.')
//
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Library General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
//-----------------------------------------------------------------------------

#include <Nsound/AudioStream.h>
#include <Nsound/Buffer.h>
#include <Nsound/OrganPipe.h>
#include <Nsound/FilterLowPassIIR.h>
#include <Nsound/FilterTone.h>
#include <Nsound/Sine.h>
#include <Nsound/Sawtooth.h>
#include <Nsound/Square.h>

// DEBUG
#include <Nsound/Plotter.h>


using namespace Nsound;
using std::cout;
using std::endl;

//-----------------------------------------------------------------------------
OrganPipe::
OrganPipe(const float64 & sample_rate)
    :
    Instrument(sample_rate),
    _sine(std::make_unique<Sine>(sample_rate))
{
}

AudioStream
OrganPipe::
play()
{
    AudioStream y(sample_rate_, 2);

    // Organ Intro to Bach's Toccata & Fugue in Dminor
    //     Start  Dur  Amp    Fqc   Pan  OutCh1  OutCh2
    // i4  26     .12  200    7.09  .9   1       2
    // i4  +      .1   300    7.07  .8   1       2
    // i4  .      .8   400    7.09  .7   1       2
    // i4  27.2   .16  500    7.07  .6   1       2
    // i4  +      .14  600    7.05  .5   1       2
    // i4  .      .12  700    7.04  .4   1       2
    // i4  .      .12  800    7.02  .3   1       2
    // i4  .      .56  900    7.01  .4   1       2
    // i4  .     1.2   1200   7.02  .5   1       2

    y << play(0.12, 219.98, 0.9)
      << play(0.10, 195.99, 0.8)
      << play(0.80, 219.98, 0.7);

    // Use AudioStream::add to insert the precise delay.
    y.add(play(0.16, 195.99, 0.6), 1.20f);

    y << play(0.14, 174.61, 0.5)
      << play(0.12, 164.80, 0.4)
      << play(0.12, 146.83, 0.3)
      << play(0.56, 138.58, 0.4)
      << play(1.20, 146.83, 0.5);

    // i4  29.8   .12  1600   6.09  .5
    // i4  +      .1   .      6.07  .5
    // i4  .      .8   .      6.09  .5
    // i4  31     .3   .      6.05  .5
    // i4  +      .3   .      6.07  .5
    // i4  .      .3   .      6.01  .5
    // i4  .     1.2   .      6.02  .5

    y.add(play(0.12, 109.99), 2.80f);

    y << play(0.10,  97.99)
      << play(0.80, 109.99);

    y.add(play(0.30,  87.30), 5.00f);

    y << play(0.30,  97.99)
      << play(0.30,  69.29)
      << play(1.20,  73.41);

    // i4  33.2   .12  3000   5.09  .5
    // i4  +      .1   .      5.07  .5
    // i4  .      .8   .      5.09  .5
    // i4  34.4   .16  .      5.07  .5
    // i4  +      .14  .      5.05  .5
    // i4  .      .12  .      5.04  .5
    // i4  .      .12  .      5.02  .5
    // i4  .      .56  .      5.01  .5
    // i4  .     1.2   .      5.02  .5

    y.add(play(0.12, 55.00), 7.20f);

    y << play(0.10, 49.00)
      << play(0.80, 55.00);

    y.add(play(0.16, 49.00), 8.40f);

    y << play(0.14, 43.65)
      << play(0.12, 41.20)
      << play(0.12, 36.71)
      << play(0.56, 34.65)
      << play(1.20, 36.71);

    // i4  36.5  2.0   .      5.01  .5
    // i4  36.7  1.8   .      5.04  .5
    // i4  36.9  1.6   .      5.07  .5
    // i4  37.1  1.4   .      5.10  .5
    // i4  37.3  1.2   .      6.01  .5
    // i4  38.7  3.2   .      5.02  .5
    // i4  38.7  3.2   .      6.02  .5
    // i4  38.7  0.8   .      5.07  .5
    // i4  +     0.8   .      5.09  .5
    // i4  .     1.6   .      5.06  .5

    y.add(play(2.00, 34.65), 10.5f);
    y.add(play(1.80, 41.20), 10.7f);
    y.add(play(1.60, 49.00), 10.9f);
    y.add(play(1.40, 58.27), 11.1f);
    y.add(play(1.20, 69.29), 11.3f);
    y.add(play(3.20, 36.71), 12.7f);
    y.add(play(3.20, 73.41), 12.7f);
    y.add(play(0.08, 49.00), 12.7f);

    for(uint32 i = 0 ; i < sample_rate_ * 0.3; ++i) y << 0.0;

    y.normalize();

    return y;
}

AudioStream
OrganPipe::
play(
    const float64 & duration,
    const float64 & frequency)
{
    return play(duration, frequency, 0.5);
}


//-----------------------------------------------------------------------------
// Principla Stops for the Friesach, Pfarrkirche, St. Bartholomäus, Austria
// pipe organ, courtesy of Piotr Grabowski.
// See https://piotrgrabowski.pl/friesach/
//
// I used a genetic algorithm to fit synthesis parameters to match the spectrum
// for the steady state of each key, then construted this table.

namespace
{

struct Parameters
{
    std::vector<float64> phases;
    std::vector<float64> weights;
};

const std::map<float64, Parameters> principal_stops = {
// D1
{   31.82070, {{0.178863, 0.000000, 0.000000, 0.681676, 0.000000, 0.032500, 0.000000, 0.000000, 0.416669, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.333596, 0.602079, 0.197084, 0.151727, 0.208809, 0.131469, 0.038798, 0.011736, 0.000000, 0.000000, 0.000000, 0.013761, 0.000000, }}
},
// E1
{   35.57610, {{0.000000, 0.014087, 0.376986, 0.796405, 0.340644, 0.000000, 0.311360, 0.000000, 0.915732, 0.000000, 0.000000, 0.865091, 0.000000, 0.000000, },
               {0.819303, 0.241672, 1.000000, 0.234663, 0.169042, 0.149165, 0.056253, 0.000000, 0.024742, 0.000000, 0.000000, 0.023646, 0.000000, 0.032215, }}
},
// C1
{   35.70020, {{0.000000, 0.724599, 1.000000, 0.000000, 0.000000, 0.000000, 0.201206, 0.350472, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.849923, 0.054118, 0.200863, 0.000000, 0.000000, 0.031276, 0.031657, 0.017140, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// C1#
{   36.17390, {{0.482778, 0.936486, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.127195, 0.000000, 0.457473, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.131578, 1.000000, 0.074977, 0.000000, 0.000000, 0.000000, 0.000000, 0.012002, 0.000000, 0.012422, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// D1#
{   40.59710, {{0.274344, 0.861507, 0.189796, 0.328802, 0.000000, 0.620041, 0.000000, 0.000000, 0.207728, 0.083810, 0.000000, 0.000000, 0.000000, 0.079490, },
               {1.000000, 0.611838, 0.148778, 0.420693, 0.000000, 0.068712, 0.050326, 0.020849, 0.024457, 0.025268, 0.000000, 0.000000, 0.000000, 0.012125, }}
},
// F1
{   46.54620, {{0.114277, 0.116326, 0.000000, 1.000000, 0.018393, 0.000000, 0.011104, 0.000000, 0.000000, 0.000000, 0.120391, 0.000000, 0.000000, 0.000000, },
               {0.232978, 0.291172, 1.000000, 0.778418, 0.244130, 0.100779, 0.120845, 0.066126, 0.044536, 0.060280, 0.033871, 0.012891, 0.000000, 0.000000, }}
},
// F1#
{   49.05570, {{0.167795, 0.081680, 0.493099, 0.703307, 0.116869, 0.000000, 0.000000, 0.462305, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.450995, 1.000000, 0.043545, 0.157153, 0.029159, 0.019877, 0.000000, 0.025009, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// C2
{   65.84650, {{0.779330, 0.000000, 0.000000, 0.380332, 0.000000, 0.767522, 0.339291, 0.000000, 0.195849, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.126476, 0.050522, 0.018136, 0.000000, 0.006818, 0.003552, 0.000000, 0.002897, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// C2#
{   69.69020, {{0.309466, 1.000000, 0.657809, 1.000000, 0.000000, 0.000000, 0.053366, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.290594, 0.026253, 0.030537, 0.024253, 0.000000, 0.011658, 0.017574, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// D2
{   73.76920, {{0.000000, 0.000000, 0.390193, 0.641627, 0.170202, 0.083324, 0.000000, 0.132909, 0.000000, 0.000000, 0.140752, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.260254, 0.164010, 0.022885, 0.006713, 0.006472, 0.003823, 0.009526, 0.013173, 0.000000, 0.003275, 0.000000, 0.000000, 0.000000, }}
},
// D2#
{   78.09970, {{0.000000, 0.609573, 0.181768, 1.000000, 0.000000, 0.000000, 0.909171, 0.521061, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.332774, 0.108176, 0.020410, 0.000000, 0.000000, 0.014483, 0.012718, 0.010609, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// E2
{   82.95160, {{1.000000, 0.860465, 0.402615, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.564112, 0.000000, 0.000000, 0.000000, },
               {0.909148, 1.000000, 0.122401, 0.042432, 0.031959, 0.016984, 0.030948, 0.046916, 0.005064, 0.011005, 0.007117, 0.000000, 0.000000, 0.000000, }}
},
// F2
{   87.49830, {{0.000000, 0.227767, 0.359049, 0.261285, 0.028545, 0.219989, 0.000000, 0.619026, 0.000000, 0.000000, 0.000000, 0.072463, 0.000000, 0.000000, },
               {1.000000, 0.777699, 0.219627, 0.044312, 0.007927, 0.006596, 0.016116, 0.004450, 0.000000, 0.005679, 0.000000, 0.002058, 0.000000, 0.000000, }}
},
// F2#
{   92.74890, {{1.000000, 0.000000, 0.000000, 0.636785, 0.486667, 0.046134, 0.598221, 0.133385, 1.000000, 0.000000, 0.000000, 0.883606, 0.000000, 0.000000, },
               {1.000000, 0.246739, 0.468812, 0.028273, 0.027005, 0.027766, 0.023527, 0.011877, 0.011240, 0.011015, 0.000000, 0.010138, 0.000000, 0.000000, }}
},
// G2
{   98.11900, {{0.000000, 0.924706, 0.525964, 0.977846, 0.000000, 0.526047, 0.000000, 0.155186, 0.873468, 0.000000, 0.000000, 0.708719, 0.000000, 0.000000, },
               {0.615046, 1.000000, 0.605690, 0.051814, 0.065044, 0.159174, 0.065666, 0.041207, 0.028088, 0.019093, 0.005163, 0.004721, 0.008420, 0.000000, }}
},
// G2#
{  103.92200, {{0.846730, 0.000000, 0.061026, 0.000000, 0.000000, 0.460270, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.114263, 0.144378, 0.011642, 0.012436, 0.020640, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// A2
{  110.26600, {{0.762397, 0.138266, 0.987677, 0.000000, 0.000000, 0.738788, 0.318657, 0.000000, 0.000000, 0.280351, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.126007, 0.238038, 0.037964, 0.041051, 0.024598, 0.011564, 0.000000, 0.000000, 0.003692, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// A2#
{  116.71900, {{0.531799, 1.000000, 0.000000, 1.000000, 0.708564, 0.769644, 0.380880, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.168855, 0.075392, 0.057911, 0.024938, 0.010914, 0.018178, 0.000000, 0.012644, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// B2
{  124.15300, {{0.781473, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.090460, 0.013500, 0.000000, 0.000000, 0.839448, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.549198, 0.139505, 0.107672, 0.033392, 0.000000, 0.045194, 0.013586, 0.000000, 0.000000, 0.001230, 0.000000, 0.000000, 0.000000, }}
},
// C3
{  131.12700, {{0.013329, 0.000000, 1.000000, 0.000000, 0.000000, 0.336698, 0.000000, 0.189448, 0.395742, 0.977692, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.532138, 0.145750, 0.029118, 0.032752, 0.019109, 0.024931, 0.009477, 0.004809, 0.007884, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// C3#
{  138.91500, {{0.000000, 1.000000, 0.000000, 1.000000, 0.000000, 1.000000, 0.000000, 1.000000, 0.074964, 0.613947, 0.703597, 0.450802, 0.013540, 0.000000, },
               {0.374645, 1.000000, 0.326857, 0.257265, 0.198019, 0.133056, 0.071164, 0.060482, 0.072952, 0.031896, 0.015097, 0.011796, 0.012808, 0.000000, }}
},
// D3
{  147.31200, {{1.000000, 0.704123, 0.640024, 0.512513, 0.194542, 1.000000, 0.819689, 0.358266, 0.776898, 0.000000, 0.000000, 0.000000, 0.632181, 0.000000, },
               {0.788598, 1.000000, 0.685592, 0.288437, 0.146259, 0.166393, 0.067266, 0.030963, 0.028813, 0.025391, 0.019152, 0.000000, 0.006878, 0.004764, }}
},
// D3#
{  156.34800, {{0.000000, 1.000000, 0.627153, 0.000000, 0.359881, 0.000000, 0.931946, 0.000000, 0.000000, 0.826616, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.139917, 0.155525, 0.102423, 0.043958, 0.052734, 0.016708, 0.036361, 0.000000, 0.016892, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// E3
{  165.33900, {{0.198412, 0.456825, 0.773711, 0.338361, 0.000000, 0.996781, 0.367106, 0.000000, 0.348969, 0.058407, 0.000000, 0.123552, 0.000000, 0.000000, },
               {1.000000, 0.153768, 0.218159, 0.096627, 0.025208, 0.024610, 0.011477, 0.008051, 0.002367, 0.007680, 0.000000, 0.000628, 0.003117, 0.000000, }}
},
// F3
{  175.39400, {{1.000000, 0.152001, 0.027539, 1.000000, 0.039392, 0.000000, 0.309015, 0.000000, 0.000000, 0.000000, 0.120221, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.571831, 0.381593, 0.108778, 0.033133, 0.037482, 0.054902, 0.032548, 0.000000, 0.000000, 0.010079, 0.000000, 0.000000, 0.000000, }}
},
// F3#
{  185.55500, {{0.000000, 0.000000, 0.000000, 1.000000, 0.857416, 0.224525, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.823380, 0.187002, 0.000000, },
               {1.000000, 0.261337, 0.264446, 0.030581, 0.110103, 0.036612, 0.000000, 0.012421, 0.019673, 0.013027, 0.000000, 0.014335, 0.010843, 0.000000, }}
},
// G3
{  196.61800, {{1.000000, 1.000000, 0.668947, 0.000000, 0.836954, 0.339790, 0.954437, 0.000000, 0.000000, 0.225369, 0.371753, 0.000000, 0.306349, 0.000000, },
               {0.800919, 1.000000, 0.244137, 0.012583, 0.083939, 0.054856, 0.064030, 0.026467, 0.015024, 0.010171, 0.004206, 0.001143, 0.000770, 0.000000, }}
},
// C4
{  262.63000, {{0.000000, 0.000000, 0.260832, 0.043430, 0.924308, 0.443267, 0.637123, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.908085, 0.302507, 1.000000, 0.433641, 0.178382, 0.115291, 0.017097, 0.000000, 0.040049, 0.000000, 0.007996, 0.000000, 0.000000, 0.000000, }}
},
// C4#
{  278.42300, {{0.155159, 0.000000, 0.000000, 0.125527, 0.013347, 0.000000, 0.000000, 0.400528, 0.839620, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.265296, 0.070350, 0.085848, 0.049296, 0.047249, 0.028273, 0.015718, 0.014895, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// D4
{  294.71600, {{0.432643, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.838571, 0.617319, 0.000000, 0.000000, },
               {1.000000, 0.779957, 0.205625, 0.042561, 0.077761, 0.018120, 0.002626, 0.032003, 0.018404, 0.015641, 0.005088, 0.000147, 0.000000, 0.000000, }}
},
// D4#
{  312.46100, {{0.708218, 1.000000, 0.000000, 1.000000, 0.465121, 0.000000, 0.426548, 0.212235, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.326106, 0.022897, 0.141918, 0.013825, 0.040017, 0.021676, 0.020979, 0.012553, 0.016368, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// E4
{  330.97200, {{0.914592, 0.641204, 0.000000, 0.000000, 0.000000, 0.000000, 0.750665, 0.000000, 0.005777, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.239897, 1.000000, 0.177226, 0.123113, 0.033931, 0.011942, 0.025935, 0.005590, 0.004669, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// F4
{  350.50800, {{0.000000, 0.767601, 0.000000, 0.154881, 0.024146, 0.293994, 0.000000, 0.268771, 0.376315, 0.372925, 0.766986, 0.371831, 0.000000, 0.000000, },
               {1.000000, 0.485479, 0.365607, 0.102212, 0.047433, 0.057906, 0.030354, 0.016388, 0.012424, 0.007650, 0.014134, 0.006222, 0.000000, 0.000000, }}
},
// F4#
{  371.16900, {{0.901913, 0.284476, 0.095864, 0.163648, 0.847245, 0.869526, 0.557651, 0.000000, 0.095576, 0.469990, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.269044, 0.251806, 0.018151, 0.124789, 0.020254, 0.034658, 0.000000, 0.012502, 0.012336, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// G4
{  393.27900, {{1.000000, 0.312965, 0.404407, 0.084390, 0.000000, 0.000000, 0.111383, 0.674254, 0.000000, 1.000000, 0.378311, 1.000000, 0.000000, 0.000000, },
               {1.000000, 0.464751, 0.039249, 0.126450, 0.173539, 0.118263, 0.037419, 0.029239, 0.028161, 0.037179, 0.016912, 0.013396, 0.000000, 0.000000, }}
},
// G4#
{  416.67100, {{0.000000, 0.231726, 0.317817, 0.000000, 0.900531, 0.000000, 0.000000, 0.982333, 0.396468, 0.000000, 0.486498, 0.000000, 0.000000, 0.000000, },
               {0.491209, 1.000000, 0.349631, 0.099628, 0.139724, 0.093579, 0.047428, 0.019674, 0.007866, 0.015282, 0.008545, 0.000000, 0.000000, 0.000000, }}
},
// A4
{  441.66000, {{0.756321, 1.000000, 0.040482, 0.659146, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.643882, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.769964, 0.225149, 0.495462, 0.113568, 0.055514, 0.030237, 0.013756, 0.016442, 0.013314, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// A4#
{  468.20600, {{1.000000, 0.068456, 0.698811, 0.000000, 0.000000, 1.000000, 0.031125, 0.000000, 0.182576, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.194542, 0.129159, 0.149330, 0.000000, 0.018519, 0.019671, 0.000000, 0.012665, 0.011935, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// B4
{  495.07200, {{0.936893, 0.997375, 0.000000, 0.107220, 0.000000, 0.086720, 0.000000, 0.663155, 0.969123, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.742818, 1.000000, 0.123910, 0.132591, 0.123028, 0.012767, 0.014164, 0.001555, 0.015617, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// C5
{  525.74700, {{0.085746, 0.984775, 0.902633, 0.428387, 0.000000, 0.546067, 0.273848, 0.165969, 0.108738, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.945770, 0.209833, 0.147792, 0.153999, 0.038100, 0.061782, 0.026308, 0.004555, 0.012039, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// C5#
{  557.09200, {{0.425468, 0.225732, 1.000000, 0.459277, 1.000000, 1.000000, 0.384659, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.443332, 1.000000, 0.032761, 0.097356, 0.037776, 0.031127, 0.013288, 0.016535, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// D5
{  589.66600, {{0.125609, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.486039, 1.000000, 0.054052, 0.090611, 0.012278, 0.013599, 0.006449, 0.000000, 0.004121, 0.000943, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// D5#
{  623.97300, {{0.000000, 0.000000, 0.000000, 0.727659, 0.630439, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.634152, 0.000000, 0.098358, 0.027952, 0.000000, 0.010275, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// E5
{  661.35900, {{0.840179, 0.796558, 0.085378, 0.263783, 0.000000, 0.000000, 1.000000, 0.703376, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.510656, 1.000000, 0.037866, 0.137120, 0.022091, 0.000000, 0.025062, 0.010763, 0.000000, 0.000000, 0.008345, 0.000706, 0.000000, 0.000000, }}
},
// F5
{  699.93500, {{0.759171, 0.109033, 0.851269, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.570592, 1.000000, 0.336914, 0.129034, 0.104954, 0.032000, 0.007608, 0.024803, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// F5#
{  743.12400, {{0.000000, 0.891100, 0.000000, 0.213536, 0.000000, 1.000000, 0.000000, 0.125534, 0.535953, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.374055, 1.000000, 0.350298, 0.365048, 0.051860, 0.055696, 0.011215, 0.019488, 0.010645, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// G5
{  787.41500, {{0.000000, 0.768557, 0.576894, 0.089118, 0.287612, 0.231350, 0.000000, 1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.958088, 0.459752, 0.102034, 0.019914, 0.031096, 0.000000, 0.018014, 0.013451, 0.000000, 0.002377, 0.000000, 0.000000, 0.000220, }}
},
// G5#
{  834.23100, {{0.571067, 0.628649, 0.000000, 0.498087, 1.000000, 0.000000, 0.260963, 0.000000, 0.655488, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.168715, 0.120981, 0.101011, 0.023883, 0.000000, 0.007855, 0.000000, 0.006656, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// A5
{  883.39000, {{0.000000, 0.000000, 0.617309, 0.577392, 0.000000, 0.587302, 0.884758, 0.428947, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.164986, 1.000000, 0.111940, 0.157719, 0.013662, 0.020707, 0.014294, 0.006272, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// A5#
{  935.61700, {{0.000000, 0.325743, 0.279960, 0.473329, 0.000000, 0.158150, 1.000000, 0.000000, 0.176026, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.765170, 0.304517, 0.090894, 0.015863, 0.021225, 0.011826, 0.000000, 0.010322, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// B5
{  990.85500, {{0.527453, 0.000000, 0.000000, 0.000000, 0.371177, 0.000000, 0.000000, 0.149464, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.345736, 0.000000, 0.164520, 0.022945, 0.008425, 0.037438, 0.000918, 0.000000, 0.000000, 0.000000, 0.000000, 0.008826, 0.000000, }}
},
// C6
{ 1052.09000, {{0.000000, 1.000000, 0.306043, 0.955495, 0.000000, 0.564716, 0.000000, 1.000000, 0.646141, 0.000000, 0.000000, 0.341534, 0.000000, 0.000000, },
               {1.000000, 0.648249, 0.264856, 0.208992, 0.000000, 0.034433, 0.016007, 0.032849, 0.006897, 0.000000, 0.024209, 0.005137, 0.011164, 0.000000, }}
},
// C6#
{ 1113.33000, {{0.751854, 0.231480, 0.000000, 0.255205, 0.055533, 0.000000, 0.226605, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.387793, 0.362940, 0.196300, 0.049123, 0.025055, 0.013357, 0.000000, 0.014265, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// D6
{ 1179.02000, {{1.000000, 0.000000, 0.000000, 0.735331, 0.000000, 0.000000, 0.000000, 0.010869, 0.000000, 0.056943, 1.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.510868, 0.521743, 0.195312, 0.029235, 0.005229, 0.016882, 0.011065, 0.010606, 0.003244, 0.006561, 0.000000, 0.000000, 0.000000, }}
},
// D6#
{ 1248.84000, {{0.000000, 0.304583, 1.000000, 0.000000, 0.000000, 0.261126, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.503703, 0.092661, 0.126252, 0.014912, 0.025090, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// E6
{ 1321.54000, {{0.316372, 0.000000, 0.293211, 0.490591, 0.365399, 0.390590, 0.951362, 0.000000, 0.000000, 0.000000, 0.159875, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.671147, 0.266992, 0.102146, 0.017870, 0.009888, 0.019892, 0.026277, 0.006554, 0.000000, 0.006551, 0.000000, 0.000000, 0.000000, }}
},
// F6
{ 1400.52000, {{1.000000, 1.000000, 1.000000, 0.799466, 0.132275, 0.269653, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.767077, 0.000000, 0.000000, },
               {1.000000, 0.294478, 0.329304, 0.116107, 0.018686, 0.014550, 0.008090, 0.001853, 0.000000, 0.000000, 0.000000, 0.006286, 0.000000, 0.000000, }}
},
// F6#
{ 1485.38000, {{0.000000, 0.520080, 1.000000, 0.067380, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.895249, 1.000000, 0.190910, 0.084265, 0.000000, 0.026533, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// G6
{ 1575.15000, {{0.261113, 0.420037, 1.000000, 0.283850, 0.000000, 0.333558, 0.495340, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.350544, 0.140508, 0.040753, 0.008394, 0.004545, 0.003323, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// G6#
{ 1668.85000, {{1.000000, 0.000000, 0.000000, 0.265256, 0.209685, 0.212701, 0.201793, 0.106543, 0.032219, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.440989, 0.031818, 0.032933, 0.008318, 0.021168, 0.014697, 0.004087, 0.006209, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// A6
{ 1767.02000, {{0.000000, 0.020647, 0.280440, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.060069, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.689164, 0.207594, 0.107791, 0.011286, 0.028248, 0.014659, 0.003645, 0.000000, 0.006509, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// C7
{ 2100.51000, {{0.472786, 0.718946, 0.077632, 0.763894, 0.563160, 0.000000, 1.000000, 0.000000, 0.513299, 0.371054, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.964414, 0.780531, 0.025363, 0.036110, 0.016619, 0.012577, 0.012675, 0.014242, 0.012046, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// C7#
{ 2226.47000, {{1.000000, 0.794569, 0.812474, 0.646604, 0.420340, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.313442, 0.025512, 0.051774, 0.013735, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// D7
{ 2358.14000, {{0.384694, 0.246306, 0.157474, 1.000000, 0.077167, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.327596, 1.000000, 0.010551, 0.020431, 0.038691, 0.011940, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// D7#
{ 2500.20000, {{0.000000, 1.000000, 0.465360, 0.596163, 0.000000, 0.679636, 0.155637, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.391603, 1.000000, 0.096775, 0.154982, 0.019778, 0.012725, 0.013184, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// E7
{ 2644.74000, {{0.192777, 0.165333, 0.003047, 0.488385, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.527487, 0.108549, 0.012533, 0.000000, 0.010919, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// F7
{ 2804.32000, {{0.000000, 0.940406, 0.774100, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.900730, 0.044079, 0.065749, 0.032851, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// F7#
{ 2970.49000, {{0.000000, 0.865605, 0.490331, 0.755248, 0.000000, 0.579930, 0.594048, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.791288, 1.000000, 0.492588, 0.145057, 0.018775, 0.026327, 0.024794, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// G7
{ 3147.59000, {{0.000000, 0.299683, 0.000000, 0.000000, 0.000000, 0.551083, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.580715, 0.049265, 0.031220, 0.000000, 0.015356, 0.019788, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// G7#
{ 3334.10000, {{0.000000, 0.132434, 0.000000, 0.532003, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {0.450382, 1.000000, 0.015618, 0.013524, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},
// A7
{ 3533.88000, {{0.000000, 0.000000, 0.124131, 0.356764, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, },
               {1.000000, 0.771905, 0.225805, 0.022204, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, }}
},

};

const Parameters & get_nearest_params(float64 frequency)
{
    auto lower = principal_stops.lower_bound(frequency);
    auto upper = lower; ++upper;
    if (lower == principal_stops.end()) return principal_stops.begin()->second;
    if (upper == principal_stops.end()) return lower->second;
    auto dist_to_lower = std::abs(lower->first - frequency);
    auto dist_to_upper = std::abs(upper->first - frequency);
    return (dist_to_upper < dist_to_lower) ? upper->second : lower->second;
}

} // Anonymous namespace.



AudioStream
OrganPipe::
play(
    const float64 & duration,
    const float64 & frequency,
    const float64 & pan)
{
    M_ASSERT_VALUE(duration, >, 0);

    const auto & params = get_nearest_params(frequency);
    const auto & phases = params.phases;
    const auto & weights = params.weights;

    float64 pan_left = pan;
    float64 pan_right = 1.0 - pan_left;

    Buffer dclick;
    Buffer amp1;
    Buffer amp2;
    Buffer amp3;
    Buffer amp4;

    if(duration > 0.002)
    {
        dclick
            << _sine->drawLine(0.001, 0.0, 1.0)
            << _sine->drawLine(duration - 0.002, 1.0, 1.0)
            << _sine->drawLine(0.001, 1.0, 0.0);
    }
    else
    {
        dclick << _sine->drawLine(duration, 1.0, 1.0);
    }

    if(duration > 0.02)
    {
        amp1
            << _sine->drawLine(0.01, 0.0, 1.0)
            << _sine->drawLine(duration - 0.02, 1.0, 1.0)
            << _sine->drawLine(0.01, 1.0, 0.0);
    }
    else
    {
        amp1 = _sine->drawLine(duration, 1.0, 1.0);
    }

    if(duration > 0.16)
    {
        amp2
            << _sine->drawLine(0.05, 0.0, 1.0)
            << _sine->drawLine(0.1, 1.0, 0.7)
            << _sine->drawLine(duration - 0.16, 0.7, 0.7)
            << _sine->drawLine(0.01, 0.7, 0.0);
    }
    else
    {
        auto third = duration / 3.0;
        amp2
            << _sine->drawLine(third, 0.0, 1.0)
            << _sine->drawLine(duration - third, 1.0, 0.0);
    }

    if(duration > 0.08)
    {
        amp3
            << _sine->drawLine(0.03, 0.0, 1.0)
            << _sine->drawLine(0.05, 1.0, 0.0)
            << _sine->drawLine(duration - 0.08, 0.0, 0.0);
    }
    else
    {
        amp3 = _sine->drawLine(duration, 1.0, 1.0);
    }

    if(duration > 0.21)
    {
        amp4
            << _sine->drawLine(0.1, 0.0, 0.03)
            << _sine->drawLine(0.1, 0.03, 0.01)
            << _sine->drawLine(duration -0.21, 0.01, 0.01)
            << _sine->drawLine(0.01, 0.01, 0.0);
    }
    else
    {
        auto half = duration / 2.0;
        amp4
            << _sine->drawLine(half, 0.0, 0.3)
            << _sine->drawLine(duration - half, 0.3, 0.0);
    }

    Buffer out = _sine->silence(duration);

    for (std::size_t i = 0 ; i < weights.size(); ++i)
    {
        const auto f = (i + 1.0) * frequency;
        const auto & p = phases[i];
        const auto & w = weights[i];

        if (i == 0)
        {
            out += amp1 * _sine->generate2(duration, f, p) * w;
        }
        else
        {
            out += amp2 * _sine->generate2(duration, f, p) * w;
        }
    }


//~    out += amp3 * _sine->generate2(duration, ophf, 0.07) / ophf;
//~    out += amp1 * _sine->generate2(duration, op1f, 0.14) / op1f;
//~    out += amp2 * _sine->generate2(duration, op2f, 0.21) / op2f;
//~    out += amp2 * _sine->generate2(duration, op4f, 0.28) / op4f;
//~    out += amp2 * _sine->generate2(duration, op8f, 0.35) / op8f;
//~    out += amp2 * _sine->generate2(duration, op16f, 0.42) / op16f;

    //-------------------------------------------------------------------------
    // TODO: remove before mergning to trunk.
//~    static Plotter plt;

//~    plt.figure();
//~    plt.plot(amp1, "-", "label='amp1'");
//~    plt.plot(amp2, "-", "label='amp2'");
//~    plt.plot(amp3, "-", "label='amp3'");
//~    plt.plot(amp4, "-", "label='amp4'");
//~    plt.plot(dclick, "-", "label='dclick'");
//~    plt.legend();
//~    plt.title("envelopes");
//~    plt.xlim(-560, 11'560);

//~    printf("duration = %f\n", duration); fflush(stdout);

//~    plt.figure();

//~    plt.plot(1.0, op1f, "+", "label='op1f'");
//~    plt.plot(2.0, op2f, "+", "label='op2f'");
//~    plt.plot(3.0, op4f, "+", "label='op4f'");
//~    plt.plot(4.0, op8f, "+", "label='op8f'");
//~    plt.plot(5.0, 5 * ophf, "+", "label='ophf'");
//~    plt.plot(6.0, op16f, "+", "label='op16f'");
//~    plt.title("op[1-7]f");

//~    plt.figure();
//~    plt.plot(p1);
//~    plt.plot(p2);
//~    plt.title("p1, p2");

//~    plt.figure();
//~    plt.plot(out);
//~    plt.title("output");

//~    static int count = 0;

//~    ++count;

//~    if (count == 2)
//~    {
//~        plt.show();
//~        M_THROW("exit debugging");
//~    }


    AudioStream y(sample_rate_, 2);

    y[0] = out * dclick * pan_left;
    y[1] = out * dclick * pan_right;

    return y;
}

// :mode=c++: jEdit modeline
